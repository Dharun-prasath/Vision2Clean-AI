# Docker Compose for Vision2Clean AI Frontend
# Complete development and production environment setup

version: '3.8'

services:
  # Development environment
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: vision2clean-frontend-dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8080/api
      - VITE_ENVIRONMENT=development
    networks:
      - vision2clean-network
    restart: unless-stopped
    profiles:
      - development

  # Production environment
  frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vision2clean-frontend-prod
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    networks:
      - vision2clean-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Staging environment
  frontend-staging:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vision2clean-frontend-staging
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
      - STAGING=true
    networks:
      - vision2clean-network
    restart: unless-stopped
    profiles:
      - staging
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy for production
  nginx-proxy:
    image: nginx:alpine
    container_name: vision2clean-proxy
    ports:
      - "443:443"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - frontend-prod
    networks:
      - vision2clean-network
    restart: unless-stopped
    profiles:
      - production

  # Redis for caching (optional)
  redis:
    image: redis:alpine
    container_name: vision2clean-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vision2clean-network
    restart: unless-stopped
    profiles:
      - production
      - development

networks:
  vision2clean-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local