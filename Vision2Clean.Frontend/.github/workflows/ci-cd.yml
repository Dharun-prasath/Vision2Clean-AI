# CI/CD Pipeline for Vision2Clean AI Frontend
# Comprehensive workflow for testing, building, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'Vision2Clean.Frontend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'Vision2Clean.Frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: vision2clean/frontend

jobs:
  # Code Quality and Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Vision2Clean.Frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Vision2Clean.Frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint
        
      - name: Type check
        run: npm run type-check
        
      - name: Format check
        run: npm run format:check
        
      - name: Run tests
        run: npm run test:ci
        
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./Vision2Clean.Frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          
      - name: Security audit
        run: npm audit --audit-level=high
        
      - name: Bundle analysis
        run: npm run analyze
        
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: Vision2Clean.Frontend/dist/bundle-analysis.html

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality-check
    defaults:
      run:
        working-directory: ./Vision2Clean.Frontend
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Vision2Clean.Frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application (${{ matrix.environment }})
        run: npm run build:${{ matrix.environment }}
        env:
          VITE_ENVIRONMENT: ${{ matrix.environment }}
          VITE_API_BASE_URL: ${{ matrix.environment == 'production' && secrets.PROD_API_URL || matrix.environment == 'staging' && secrets.STAGING_API_URL || 'http://localhost:8080/api' }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_GA_TRACKING_ID: ${{ matrix.environment == 'production' && secrets.GA_TRACKING_ID || '' }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: Vision2Clean.Frontend/dist/
          retention-days: 7

  # Docker Build and Push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [quality-check, build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Vision2Clean.Frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.vision2clean.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example, using kubectl, docker-compose, or cloud provider CLI
          
      - name: Run health checks
        run: |
          echo "Running health checks..."
          curl -f https://staging.vision2clean.com/health || exit 1
          
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://vision2clean.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          
      - name: Run health checks
        run: |
          echo "Running health checks..."
          curl -f https://vision2clean.com/health || exit 1
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Vision2Clean Frontend deployed to production successfully! ðŸš€'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: ./Vision2Clean.Frontend/.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true